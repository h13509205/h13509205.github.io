---
title: "leetcode总结篇2"
subtitle: "array操作"
author: "hwt"
avatar: "img/authors/hwt.jpg"
image: "img/20160416.jpg"
date:   2016-04-16 14:13:12
---

## 关于对array的问题总结  
### 0 调整格式  
  直到2016年4月16号，leetcode中array的题一共73题    

### 1 查找  
  1.1 求数组中是否存在2/3/4个数，这些数的和为给定值（或者是求有多少组不重复的满足要求，或是下标是多少，或是最接近给定数的那一组）  
  1.2 如果数组中有一个数出现次数大于数组长度的1/2，求这个数  
  1.3 查找旋转数组中的最小值/最大值  
  1.4 在旋转数组中查找一个数（旋转矩阵不包含相同值/可能包含相同值）  
  1.5 给定一个数组，求第一个没出现的正整数  
  1.6 给定一个排序数组，找出某个数字的开始和结束的index  
  1.7 在数组重要插入一个数，求要插入的位置（如果有相同值，那么返回这个值的index）  
  1.8 给定一个数组，长度为n+1，范围为1-n，找出其中那个重复的值（287题  find the duplicate number）  

### 2 排序  
  2.1 求两个排序数组的中位数  
  2.2 合并间隔（56题 merge intervals）  
  2.3 数组中只包含0 1 2 对其排序  
  2.4 有n个数字，范围从0-n，找出那个缺少的数字  

### 3 子数组问题/组合问题  
  3.1 查找和最大的连续子数组  
  3.2 买股票1234  
  3.3 查找乘积最大的连续子数组  
  3.4 从一个乱序数组中，找出最长的连续元素  
  3.5 给定一个已经排序的数字数组，求其子数组种类  
  3.6 给定一个排序的数字数组和数字k，求加起来是k的组合有多少种（39题 combination sum）  
  3.7 一个排序数组的子序列有多少种  

### 4 面积问题  
  4.1 给定一个int[] nums数组，求使(j-i)\*min(nums[j], nums[i])最大的i，j值(11题container with most water)  
  4.2 42题 trapping rain water 不知道怎么描述成一般化问题  
  4.3 84题 largest rectangle in histogram 计算用数组表示的最大长方形面积  


### 5 重复数字  
  5.1 判断一个数组是否包含重复数字  
  5.2 查找重复的元素并去掉它(在排序数组中/在未排序数组中)  
  5.3 给定数字k，看是否有重复数字的下标差比k小  
  5.4 判断一个数组的重复数字超过数组长度n/3的个数  
  5.5 一个长度为n+1的数组，数字范围为1-n，假设只有一个重复数字，找出那个重复的数字  

### 6 数组旋转  
  6.1 把数组`[1,2,3,4,5,6,7]` 旋转为 `[5,6,7,1,2,3,4]`  
  6.2 旋转二维数组（90/180/270度）  

### 7 数组合并/移动  
  7.1 把数组中的0元素移到数组的最后（其他数字顺序不变）  
  7.2 合并两个已经排过序的数组  
  7.3 57题 insert interval  

### 8 二维矩阵  
  8.1 查找二维字符矩阵相邻字符是否能组成给定字符串  
  8.2 生成螺旋矩阵（54题 spiral matrix）  
  8.3 二维数组由0/1组成，找出最大的，由一组成的长方形  
  8.4 给定一个数字二维矩阵，如果某个点为0，那么就把它的行和列都置为0，不用辅助空间  
  8.5 一个二维数组，每一行从左向右递增，每一列从上到下递增，在这个数组中找给定值  

### 杂项  
  给定一个数，用一个int[]数组来表示它，并且求这个数加一之后，int[]数组如何变化  
  杨辉三角的生成  
  给定一个数组，计算除了自生，其他元素的乘积


## 通用的array处理方式  
### 1 排序  
  O(n)时间，O(n)空间：基数排序，基数排序，桶排序。其中基数排序和桶排序的区别就是基数排序必须要有10个桶（0-9）,桶排序可以随意应以桶的个数  
  O(nlogn)时间，O(1)空间：快速排序，归并排序（原地归并，没看懂做法），堆排序（先建堆，再一个一个输出）  
  O(n*n)时间，O(1)空间：插入排序，冒泡排序，希尔排序  
  其他排序：位图法（仅适用于数字最多出现一次，且范围较小的情况），[拓扑排序](http://blog.csdn.net/dm_vincent/article/details/7714519) 2种方法实现（DFS 与 BFS）  

### 2 查找----二分法  
  对于线性数组的查找，如果能用到二分法查找，那么效率就已经很高了（O(logn)），前提是数组排好了序。前面1.8里的那道题，不是从数组下标考虑，而是从数组内部的值来考虑，进行了二分查找，是一道比较有意思的题目（打破常规思维）。  
  剩下的得看数组的特点来合理定制二分的策略，来保证要找的数在其中的某一边。  

### 3 数组内部元素的排列组合问题  
  首先是连续子数组的最大和问题，[解法](http://www.geeksforgeeks.org/largest-sum-contiguous-subarray/)  
  当我把这个数组后一个向前面一个相加，然后数组a就变成了数组b，数组b的第i个值为数组a的前i个值得和，那么连续子数组的最大和问题就变成了买股票的第一题的形式，就是数组中最大值减去最小值的极值  
  剩下的数组元素组合问题，基本上都可以用backtracking解决（即穷举法）  

### 4 面积问题  
  可以使用two pointer来从两边向中间计算面积  
  剩下的就只能见仁见智了  

### 5 重复数字  
  最直观的：可以用hashset，记录之前没有重复的数字，当出现重复值，那么就说明有重复数字  
  另外就是复杂度比较高的排序了，排序之后如果有两个连续的值相同，说明有重复数字  
  剩下就得看给的数字数组的特点了，如数组有一个重复的数字个数超过了数组长度的一半，如5.5的情况，就用二分法来做  
  如果数字最大和最小差比较小的话，还能用位图法来做  

### 6 数组的旋转  
  一维数组的旋转：设置start和end，然后两边从中间交换，如果是6.1的旋转的话，可以先旋转前一半，再旋转后一半，再旋转整个数组来做到（3次旋转）  
  二维数组的旋转：当然，如果用辅助空间的话，只需要把长的那一行交换到对应的宽的那一列去就行了，如果用O(1)空间来做的话，那么就相当于是把原来的矩阵从两个对角线分开，分成4个部分，每个部分交换到正确的位置，这样可以保证不使用额外空间。  

### 总结  
  对数组的操作最主要还是要看数组内容的特点，然后根据特点来选择对应的方法，没有固定的万能解法。  
